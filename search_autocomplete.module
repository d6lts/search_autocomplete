<?php
require_once('cron.php');


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the autocomplete module
 */
function autocomplete_perm() {
  return array('use autocomplete suggestions in search form', 'administer suggestions');
} // function autocomplete_perm()


/**
 * Create administration form fro autocomplete module
 * return array describing a form
 */
function autocomplete_admin() {
  $form = array();

  // node
  $form['autocomplete_nodes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add node title to suggestions'),
    '#default_value' => variable_get('autocomplete_nodes', TRUE),
  );

  // user
  $form['autocomplete_users'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add user names to suggestions'),
    '#default_value' => variable_get('autocomplete_users', FALSE),
  );

  // taxonomy
  $form['autocomplete_taxos'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add taxonomy to suggestions'),
    '#default_value' => variable_get('autocomplete_taxos', FALSE),
  );
  if (!module_exists('taxonomy')) {
    $form['autocomplete_taxos']['#title'] = t('Add taxonomy to suggestions (require taxonomy module)');
    $form['autocomplete_taxos']['#disabled'] = TRUE;
    $form['autocomplete_taxos']['#default_value'] = FALSE;
  }

  // comment
  $form['autocomplete_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add comment subject to suggestions'),
    '#default_value' => variable_get('autocomplete_comments', FALSE),
  );
  if (!module_exists('comment')) {
    $form['autocomplete_comments']['#title'] = t('Add comment subject to suggestions (require comment module)');
    $form['autocomplete_comments']['#disabled'] = TRUE;
    $form['autocomplete_comments']['#default_value'] = FALSE;
  }

  return system_settings_form($form);
} //function autocomplete_admin()

/**
 * Validate immediatly admib form
 */
function autocomplete_admin_validate($form, &$form_state) {
  autocomplete_cron();  //update suggestion liste
} //function letusknow_submit

/**
 * Create an administration page to access admin form
 */
function autocomplete_menu() {

  $items = array();

  $items['admin/settings/autocomplete'] = array(
    'title' => 'Autocomplete Suggestions settings',
    'description' => 'Choose suggestion items for autocompletion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_admin'),
    'access arguments' => array(t('administer suggestions')),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
} // function autocomplete_menu()

/**
 * This function created the autocompletion choices list according to settings
 * @return $items: an array of all choices for the setting
 */
function autocomplete_find_autocomplete_items() {
  $node_items = array(); 
  $user_items = array();
  $user_taxo = array();

  // get options
  $option_nodes =   variable_get('autocomplete_nodes', FALSE);
  $option_users =   variable_get('autocomplete_users', FALSE);
  $option_taxos =    variable_get('autocomplete_taxos', FALSE) && module_exists('taxonomy');
  $option_comments =   variable_get('autocomplete_comments', FALSE) && module_exists('comment');

  // initialise variables
  $node_items = array();
  $user_items = array();
  $taxo_items = array();
  $comment_items = array();

  // retrive items
  if ($option_nodes) 
    $node_items = autocomplete_find_nodes();
  if ($option_users)
    $user_items = autocomplete_find_users();
  if ($option_taxos)
    $taxo_items = autocomplete_find_taxos();
  if ($option_comments)
    $comment_items = autocomplete_find_comments();

  // merge suggestions
  $items = array_merge($node_items, $user_items, $taxo_items, $comment_items);

  return $items;
}

/**
 * HOOK CRON:
 * Generate the autocomplete choices according to settings
 */
function autocomplete_cron() {
  $directory = drupal_get_path('module', 'autocomplete');
  $file_path = $directory . '/js/' . 'data_autocomplete.js';

  // If some data already exists: delete it to renew all
  if (file_exists($file_path)) {
    file_delete($file_path);
  }
  // Create the choices for autocompletion
  $file_path = file_create_filename('js/data_autocomplete.js', $directory);
  $fh = fopen($file_path, 'w');
  fwrite($fh, array2str(autocomplete_find_autocomplete_items()));
  fclose($fh);
}

/**
 * This function transforms the choices into a string.
 */
function array2str($array, $pre = '', $pad = '', $sep = ',') {
  $str = 'var search_autocomplete_items=[';
  if (is_array($array)) {
    if (count($array)) {
      foreach ($array as $v) {
        $str .= '"' . addslashes($pre . $v . $pad) . '"' . $sep;
      }
      $str = substr($str, 0, -strlen($sep));
    }
  } 
  else {
    $str .= addslashes($pre . $array . $pad);
  }
  $str .= '];';
  return $str;
}

/**
 * HOOK OF INIT:
 * add autocomplete.js on everypage
 */
function autocomplete_init() {
  drupal_add_css(drupal_get_path('module', 'autocomplete') . '/css/autocomplete.css');
  drupal_add_js(drupal_get_path('module', 'autocomplete') . '/js/data_autocomplete.js');
  drupal_add_js(drupal_get_path('module', 'autocomplete') . '/js/autocomplete.js');
}

/* ###################################################################################### *\
|*                            Search Items for autocompletion                             *|
\* ###################################################################################### */

/**
 * HELPER FOR AUTOCOMPLETE NODES:
 * Return nodes terms
 */
function autocomplete_find_nodes() {
  $items = array();
  $result = db_query(db_rewrite_sql("SELECT title FROM {node} WHERE status = 1"));
  while ($obj = db_fetch_object($result)) {
    $items[] = html_entity_decode(check_plain($obj->title), ENT_QUOTES);
  }
  return $items;
}

/**
 * HELPER FOR AUTOCOMPLETE USERS:
 * Return user names
 */
function autocomplete_find_users() {
  $items = array();
  $result = db_query(db_rewrite_sql("SELECT name FROM {users} WHERE status = 1"));
  while ($obj = db_fetch_object($result)) {
    $items[] = "pseudo: " . html_entity_decode(check_plain($obj->name), ENT_QUOTES);
  }
  return $items;
}

/**
 * HELPER FOR AUTOCOMPLETE TAXOS:
 * Return taxonomy terms
 */
function autocomplete_find_taxos() {
  $items = array();
  $result = db_query(db_rewrite_sql("SELECT name FROM {term_data}"));
  while ($obj = db_fetch_object($result)) {
    $items[] = "taxo: " . html_entity_decode(check_plain($obj->name), ENT_QUOTES);
  }
  return $items;
}

/**
 * HELPER FOR AUTOCOMPLETE COMMENTS:
 * Return comment subjects
 */
function autocomplete_find_comments() {
  $items = array();
  $result = db_query(db_rewrite_sql("SELECT subject FROM {comments}"));
  while ($obj = db_fetch_object($result)) {
    $items[] = "comment: " . html_entity_decode(check_plain($obj->subject), ENT_QUOTES);
  }
  return $items;
}