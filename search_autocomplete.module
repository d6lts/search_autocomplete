<?php

/**
 * @file
 * Search Autocomplete
 * Enables autocomplete functionality on search fields.
 *
 * @authors
 * Miroslav Talenberg (Dominique CLAUSE) <http://www.axiomcafe.fr/contact>
 *
 * Sponsored by:
 * www.axiomcafe.fr
 */


include_once('search_autocomplete.admin.inc');
include_once('search_autocomplete.finders.inc');

/**
 * Menu callback; autocomplete handler.
 * Creates suggestions for autocompletion according to settings
 */
function search_autocomplete_autocomplete($string = '') {
  $matches = array();
  $word_items = array(); 
  $node_items = array(); 
  $user_items = array();
  $taxo_items = array();
  $comment_items = array();
  static $method = 0;
  static $max_sug = 0;
  
  // get the form calling
  $fid = arg(1); 
  // Allow Drupal to parse the search query.
  $query = search_parse_query($string);
  $word = $query[1][0];
  // Check to see if we've got something to work with.
  $result = db_query('SELECT * FROM {search_autocomplete_forms} f, {search_autocomplete_suggestions} s WHERE f.fid = %d AND f.fid = s.sug_fid AND s.sug_enabled = 1', $fid);

  while ($item = db_fetch_array($result)) {
    if (($query !== NULL) && (drupal_strlen($word) >= $item['min_char']) ) {
      $prefix = $item['sug_prefix'];
      $limit = '';
      $method = $item['method'];
      $max_sug = $item['max_sug'];
      if ($method == 2) {
        $limit = ' LIMIT ' . strval($max_sug); 
      }
      if ($item['sug_name'] == 'word_title') {
        $word_items = search_autocomplete_find_words($word, $limit, $order, $prefix, $item['sort']);    
        $matches = array_merge($matches, $word_items);
      } 
      elseif ($item['sug_name'] == 'node_title') {
        $node_items = search_autocomplete_find_nodes($word, $limit, $order, $prefix, $item['sort']);
        $matches = array_merge($matches, $node_items);
      } 
      elseif ($item['sug_name'] == 'comment_title') {
        $comment_items = search_autocomplete_find_comments($word, $limit, $order, $prefix, $item['sort']);
        $matches = array_merge($matches, $comment_items);
      }
      elseif ($item['sug_name'] == 'taxo_title') {
        $taxo_items = search_autocomplete_find_taxos($word, $limit, $order, $prefix, $item['sort']);
        $matches = array_merge($matches, $taxo_items);
      } 
      elseif ($item['sug_name'] == 'username') {
        $user_items = search_autocomplete_find_users($word, $limit, $order, $prefix, $item['sort']);
        $matches = array_merge($matches, $user_items);
      }  
    }
  }

  // Return matches.
  if ($method == 2)
    drupal_json(array_slice($matches, 0, $max_sug));
  else
    drupal_json($matches);
}

/**
 * Implementation of hook_form_alter().
 * Changes the various search forms
 */
function search_autocomplete_form_alter(&$form, $form_state, $form_id) {

  // if the user is authorize to use the form
  if (user_access('search with autocomplete')) {
  
    // special case of search form:
    if ($form_id == 'search_form') {
      if ($form['module']['#value'] == 'node') {
        $form_id = 'search_page_node';
      }
      if ($form['module']['#value'] == 'user') {
        $form_id = 'search_page_user';
      }
    }
    
    $results = db_query('SELECT * FROM {search_autocomplete_forms} WHERE form_id="%s"', $form_id);
    // Build an array of returned matches.
    $match = db_fetch_array($results);

    // if this form has to be autocompleted
    if ($match['enabled']) {
      if ($match['method'] == 1) {                                        // case of jQuery plugin autocomplete
        _activate_plugin_autocompletion(&$form, $form_id, $match);
      } 
      elseif ($match['method'] == 2) {                                  // case of Drupal core autocompletion
        _activate_core_autocompletion(&$form, $form_id, $match['fid']);
      }
    }
    
  }
}



//////////////////////////////////////////////////////////
//////////          HELPERS

/**
 * Ativate Drupal Core autocompletion for the desired form
 * @param  $form    the form the input filed belongs to
 * @param  $form_id   the id of the form to autocomplete
 * @param  $fid    the fid of this form settings
 */
function _activate_core_autocompletion($form, $form_id, $fid) {
  // Search block and search box have similar form structure.
  
  if ($form_id == 'search_block_form' || $form_id == 'search_theme_form') {
    $form[$form_id]['#autocomplete_path'] = 'search_autocomplete/' . $fid . '/autocomplete';
  }

  if ($form_id == 'search_page_node') {
    // Search page; only add autocomplete to node search.
    if ($form['module']['#value'] == 'node') {
      $form['basic']['inline']['keys']['#autocomplete_path'] = 'search_autocomplete/' . $fid . '/autocomplete';
    }
  }
  if ($form_id == 'search_page_user') {
    // Search page; only add autocomplete to user search.
    if ($form['module']['#value'] == 'user') {
      $form['basic']['inline']['keys']['#autocomplete_path'] = 'search_autocomplete/' . $fid . '/autocomplete';
    }
  }
}


/**
 * Ativate jQuery plugin autocompletion for the desired form
 * @param  $form    the form the input filed belongs to
 * @param  $form_id   the id of the form to autocomplete
 * @param   $selector   the selector of the form to autocomplete
 * @param  $fid    the fid of this form settings
 */
function _activate_plugin_autocompletion($form, $form_id, $match) {
  
  drupal_add_css(drupal_get_path('module', 'search_autocomplete') . '/css/jquery.autocomplete.css');
  drupal_add_js(drupal_get_path('module', 'search_autocomplete') . '/js/jquery.autocomplete.js');

  drupal_add_js(array('search_autocomplete' => array(
    $form_id => array(
      'selector' => $match['selector'],
      'minChars' => $match['min_char'],
      'max_sug' => $match['max_sug'],
      'url' => $base_url . '/search_autocomplete/' . $match['fid'] . '/autocomplete',
      'fid' => $fid,
      'form_id' => $form_id,
  ))), 'setting');
}





