<?php

/**
 * @file
 * Search Autocomplete
 * Enables autocomplete functionality on search fields.
 *
 * @authors
 * D5 version by Arnaud Bonnevigne <http://www.bonvga.net/contact>
 * D6 port by Joakim Stai, NodeOne <http://drupal.org/user/88701>
 * Bug fixes and code review by Dominique CLAUSE, Miroslav <http://www.axiomcafe.fr/contact>
 *     # fixes: search form autocompletion: wrong callback
 *     # fixes: choosen autocomplete forms did not validate: all search forms where autocompleted
 *     # fixes: hook_menu: module administration link did not appear in admin panel
 *     # removed block search to conform with a strict port (block support will be added later)
 *
 * Sponsored by:
 * www.axiomcafe.fr
 */

/**
 * Implementation of hook_perm().
 * Valid permissions for this module
 * @return An array of valid permissions for the autocomplete module
 */
function search_autocomplete_perm() {
  return array(t('administer Search Autocomplete'), t('search with autocomplete'));
} // function search_autocomplete_perm()

/**
 * Implementation of hook_menu().
 * Create an administration page to access admin form
 */
function search_autocomplete_menu() {
  $items['admin/build/search_autocomplete'] = array(
    'title' => 'Search Autocomplete',
    'description' => 'Choose settings and suggestion items for autocompletion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_autocomplete_admin_settings'),
    'access arguments' => array(t('administer Search Autocomplete')),
  );
  $items['search_autocomplete/autocomplete'] = array(
    'page callback' => 'search_autocomplete_autocomplete',
    'access arguments' => array('search with autocomplete'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback; administration settings.
 */
function search_autocomplete_admin_settings() {
  $form = array();
  
  $form['search_autocomplete_forms'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable autocomplete on'),
    '#description' => t('Select the search forms that should have autocomplete enabled.'),
    '#options' => array(
      'search_form' => t('Search page (node tab only)'),
      'search_block_form' => t('Search block'),
      'search_theme_form' => t('Search box (added by the theme)'),
    ),
    '#default_value' => variable_get('search_autocomplete_forms', array('page', 'block', 'box')),
  );

  $form['search_autocomplete_setting'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autocomplete settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['search_autocomplete_setting']['search_autocomplete_method'] = array(
    '#type' => 'radios',
    '#title' => t('Choose a search method'),
    '#default_value' => variable_get('search_autocomplete_method', 1),
    '#options' => array(
      '1' => t('Natural sort (no sort)'),
      '2' => t('Sort keyword alphabetically'),
      '3' => t('Sort by keyword\'s score'),
      '4' => t('Sort by keyword\'s relevance (slow)'),
    ),
    '#description' => t("Caution: Some request method can be very slow !"),
    '#autocomplete_path' => 'search_autocomplete/autocomplete',
    '#required' => TRUE,
  );
  $trigger = array();
  for ($i=1;$i<20;$i++) {
    $trigger[$i] = $i .' '. t('characters');
  }
  $form['search_autocomplete_setting']['search_autocomplete_trigger'] = array(
    '#type' => 'select',
    '#title' => t('Minimum keyword size that uncouple autocomplete search'),
    '#default_value' => variable_get('search_autocomplete_trigger', variable_get('minimum_word_size', 3)),
    '#options' => $trigger,
    '#multiple' => FALSE,
    '#required' => TRUE,
  );
  $limit = array();
  for ($i=1;$i<50;$i++) {
    $limit[$i] = $i .' '. t('results');
  }
  $form['search_autocomplete_setting']['search_autocomplete_limit'] = array(
    '#type' => 'select',
    '#title' => t('Limit of the autocomplete search result'),
    '#default_value' => variable_get('search_autocomplete_limit', 15),
    '#options' => $limit,
    '#multiple' => FALSE,
    '#required' => TRUE,
  );

  $form['search_autocomplete_setting_test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test field'),
    '#description' => t('In this field, you can check the appearence of an autocomplete search field.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $form['search_autocomplete_setting_test']['search_autocomplete_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Search autocomplete test field'),
    '#size' => 40,
    '#maxlength' => 40,
    '#default_value' => '',
    '#description' => t("Enter a keyword and wait for the result."),
    '#autocomplete_path' => 'search_autocomplete/autocomplete',
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Menu callback; autocomplete handler.
 * Creates suggestions for autocompletion according to settings
 */
function search_autocomplete_autocomplete($string = '') {
  $matches = array();

  // Allow Drupal to parse the search query.
  $query = search_parse_query($string);

  // Check to see if we've got something to work with.
  if ($query !== NULL && drupal_strlen($query[1][0]) >= (variable_get('search_autocomplete_trigger', variable_get('minimum_word_size', 3))) ) {

    // Perform search using the chosen sort method.
    $limit = variable_get('search_autocomplete_limit', 10);
    $word = $query[1][0];
    switch (variable_get('search_autocomplete_sort', 'none')) {
      case 'none':
        $result = db_query_range("SELECT DISTINCT s.word FROM {search_index} s, {node} n WHERE s.type = 'node' AND n.nid = s.sid AND n.status = 1 AND LOWER(s.word) LIKE LOWER('%s%%')", $word, 0, $limit);
        break;
      case 'alphabetical':
        $result = db_query_range("SELECT DISTINCT i.word FROM {search_index} i, {node} n WHERE i.type = 'node' AND n.nid = i.sid AND n.status = 1 AND LOWER(i.word) LIKE LOWER('%s%%') ORDER BY i.word ASC", $word, 0, $limit);
        break;
      case 'score':
        $result = db_query_range("SELECT i.word FROM {search_index} i, {node} n WHERE i.type = 'node' AND n.nid = i.sid AND n.status = 1 AND LOWER(i.word) LIKE LOWER('%s%%') GROUP BY i.word ORDER BY SUM(i.score) DESC", $word, 0, $limit);
        break;
      case 'relevance':
        $result = db_query_range(db_rewrite_sql("SELECT i.word FROM {search_index} AS i INNER JOIN {search_total} AS t ON i.word = t.word INNER JOIN n AS n ON n.nid = i.sid WHERE i.type = 'node' AND n.status = 1 AND LOWER(i.word) LIKE LOWER('%s%%') GROUP BY i.word ORDER BY SUM(i.score * t.count) DESC"), $word, 0, $limit);
        break;
    }

    // Build an array of returned matches.
    while ($match = db_fetch_object($result)) {
      $matches[$match->word] = check_plain($match->word);
    }
  }

  // Return matches.
  drupal_json($matches);
}

/**
 * Implementation of hook_form_alter().
 * Changes the various search forms
 */
function search_autocomplete_form_alter(&$form, $form_state, $form_id) {

  if (user_access('search with autocomplete')) {

    $enabled_forms = variable_get('search_autocomplete_forms', array());
    if ($enabled_forms[$form_id]) {

      // Search block and search box have similar form structure.
      if ($form_id == 'search_block_form' || $form_id == 'search_theme_form') {
        $form[$form_id]['#autocomplete_path'] = 'search_autocomplete/autocomplete';
      }

      // Search page; only add autocomplete to node search.
      if ($form['module']['#value'] == 'node') {
        $form['basic']['inline']['keys']['#autocomplete_path'] = 'search_autocomplete/autocomplete';
      }
    }
  }
}
