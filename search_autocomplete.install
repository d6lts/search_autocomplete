<?php

/**
 * @file
 * This file is used to install/update/delete the module tables in database
 *
 * @authors
 * Miroslav Talenberg (Dominique CLAUSE) <http://www.axiomcafe.fr/contact>
 *
 * Sponsored by:
 * www.axiomcafe.fr
 */

//-----------------------------------------------------------------------------------------------
/**
 * Implementation of hook_schema().
 * Set the schema of database
 * @return the schema for of the table to create
 */
function search_autocomplete_schema() {
  // schema for search_autocomplete database
  $schema['search_autocomplete_forms'] = array(
    'description' => t('Store the forms to autocomplete using Search Autocomplete.'),
    'fields' => array(
      'fid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Human readable name for the form',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'form_id' => array(
        'description' => 'Reference name of the the form in drupal',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'selector' => array(
        'description' => 'Reference id selector of the the form in drupal',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'Form weight in table',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled' => array(
        'description' => 'Define if autocomplete is activated or not',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_fid' => array(
        'description' => 'Define if the from follows the configuration of another one',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'method' => array(
        'description' => 'Method of how suggestions should be populated (Drupal Core or jQuery Plugin)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'sort' => array(
        'description' => 'Sorting method for suggestions',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'min_char' => array(
        'description' => 'Minimum of character before triggering suggestions',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 3,
      ),
      'max_sug' => array(
        'description' => 'Maximum number of suggestions',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 15,
      ),
    ),
    'primary key' => array('fid'),
  );
  
  // schema for search_autocomplete database
  $schema['search_autocomplete_suggestions'] = array(
    'description' => t('Store the suggestions for this form.'),
    'fields' => array(
      'sid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sug_fid' => array(
        'description' => 'Form fid the Suggestion belongs to',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sug_enabled' => array(
        'description' => 'Define if suggestion is activated or not',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sug_prefix' => array(
        'description' => 'Human readable prefix in suggestion',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
      ),
      'sug_title' => array(
        'description' => 'Human readable title for the suggestion',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sug_name' => array(
        'description' => 'Reference name of the the suggestion in drupal',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sug_module' => array(
        'description' => 'Name of the module (if such) which the suggestion depends on',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sug_weight' => array(
        'description' => 'Suggestion weight in table',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
      
      
  return $schema;
} // function search_autocomplete_schema

//-----------------------------------------------------------------------------------------------
/**
 * Implementation of hook_install().
 */
function search_autocomplete_install() {
  $results = drupal_install_schema('search_autocomplete');          //Install the database specified in  'function search_autocomplete_schema'
  foreach ($results as $result) {                      // Check eventual errors that could have occured
    if (!$result['success'])
      drupal_set_message(st('An error has occured during table creation, please retry. If the problem persist please post an issue and report the code: #err_code:400 @query', $result['query']), 'error');
  }  
  
  $limit      = variable_get('search_autocomplete_limit', 15);
  $trigger    = variable_get('search_autocomplete_trigger', 3);
  $sort       = variable_get('search_autocomplete_method', 1);
  $enabled    = 1;

  // ----------------
  // create possible default forms
  $sql = 'INSERT INTO {search_autocomplete_forms} (title, form_id, selector, weight, enabled, method, sort, min_char, max_sug) VALUES '.
         '("%s", "%s", "%s", %d, %d, %d, %d, %d, %d),' .
         '("%s", "%s", "%s", %d, %d, %d, %d, %d, %d),' .
         '("%s", "%s", "%s", %d, %d, %d, %d, %d, %d),' .
         '("%s", "%s", "%s", %d, %d, %d, %d, %d, %d)';
  $variables = array( st('Search page - Node Tab') . "  (search/node/%)", "search_page_node", "#search-form", 0, $enabled, 1, $sort, $trigger, $limit,
                      st('Search page - User Tab') . "  (search/user/%)", "search_page_user", "#search-form", 1, $enabled, 1, $sort, $trigger, $limit,
                      st('Search Block'), "search_block_form", "#search-block-form", 0, $enabled, 1, $sort, $trigger, $limit,
                      st('Search box (added by the theme)'), "search_theme_form", "#search-theme-form", 0, $enabled, 1, $sort, $trigger, $limit );
  $ok_result1 = db_query($sql, $variables);
  if (!$ok_result1) 
    drupal_set_message(st('An error has occured while creating default forms, please retry. If the problem persist please post an issue and report the code: #err_code:401'), 'error');
  
  // ----------------
  // create the possible suggestions :
  $sql = 'INSERT INTO {search_autocomplete_suggestions} (sid, sug_fid, sug_enabled, sug_prefix, sug_title, sug_name, sug_module, sug_weight) VALUES '.
         '(%d, %d, %d, "%s", "%s", "%s", "%s", %d),' .
       '(%d, %d, %d, "%s", "%s", "%s", "%s", %d),' .
       '(%d, %d, %d, "%s", "%s", "%s", "%s", %d),' .
       '(%d, %d, %d, "%s", "%s", "%s", "%s", %d),' .
       '(%d, %d, %d, "%s", "%s", "%s", "%s", %d)';
  $ok_result2 = TRUE;
  for ($form=1; $form <= 4; $form++) {
    $variables = array( 1, $form, 1, "node:", "Add node titles", "node_title", "", 1,
              2, $form, 1, "user:", "Add node usernames", "username", "", 2,
              3, $form, 1, "vocab:", "Add node taxonomies", "taxo_title", "taxonomy", 3,
              4, $form, 1, "comment:", "Add node comment titles", "comment_title", "comment", 4,
              5, $form, 1, "", "Add all possible words (any word appearing on your website)", "word_title", "search", 5);
    $ok_result2 &= db_query($sql, $variables);
  }
  if (!$ok_result2) 
    drupal_set_message(st('An error has occured while creating default suggestions, please retry. If the problem persist please post an issue and report the code: #err_code:402'), 'error');

  variable_del('search_autocomplete_forms');
  variable_del('search_autocomplete_test');
  variable_del('search_autocomplete_limit');
  variable_del('search_autocomplete_trigger');
  variable_del('search_autocomplete_method');

  if ($ok_result1 && $ok_result2 && $result['success']) 
    drupal_set_message(st('Search Autocomplete is now correctly installed!'));

} //function search_autocomplete_install

//-----------------------------------------------------------------------------------------------
/**
 * Implementation of hook_uninstall().
 */
function search_autocomplete_uninstall() {
  $results = drupal_uninstall_schema('search_autocomplete');
  foreach ($results as $result) {
    if (!$result['success'])
      drupal_set_message(t('An error has occured while uninstalling the databases, please retry. If the problem persist please post an issue and report the code: #err_code:403'), 'error');
  }
} // function search_autocomplete_uninstall

//-----------------------------------------------------------------------------------------------
/**
 * Implementation of hook_update_N().
 */
function search_autocomplete_update_6101() {
  search_autocomplete_install();
}